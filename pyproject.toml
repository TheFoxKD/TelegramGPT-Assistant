[project]
name = "telegram-ai-assistant"
version = "0.1.0"
description = "AI-powered Telegram Desktop Assistant"
requires-python = ">=3.12"
authors = [
    { name = "Denis 🦊 (TheFoxKD)", email = "krishtopadenis@gmail.com" }
]

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-v --cov=telegram_ai_assistant --cov-report=term-missing"
python_files = [
    "tests.py",
    "test_*.py",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

# ==== Coverage ====
[tool.coverage.run]
include = ["telegram_ai_assistant/**"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = [
    "docs/*",
    "*.pyi",
]

[tool.ruff.format]
quote-style = "double"  # Используем двойные кавычки для форматтера


[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "COM812", # Missing trailing comma
    "ISC001", # Single line implicit string concatenation
    "S101", # Use of assert detected
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
    "SIM102", # Simple if-statements can be collapsed
    "UP038", # Use X | Y for type annotations
    "RUF003", # Comment cyrillic letters
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101", # Allow assertions in tests
    "PLR2004", # Allow magic numbers in tests
]
"**/__init__.py" = [
    "F401", # Unused imports
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
force-single-line = true
lines-after-imports = 2
known-first-party = ["telegram_ai_assistant"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"


[build-system]
requires = ["hatchling>=1.21.1"]
build-backend = "hatchling.build"
